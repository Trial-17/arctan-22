# Nom du workflow qui apparaîtra dans l'onglet "Actions" de votre repo
name: Build Backend API and ZXP Plugin

# Déclencheur : ce workflow s'exécute à chaque "push" sur la branche "main"
on:
  push:
    branches: [ main ]
  # Permet aussi de le lancer manuellement depuis l'interface de GitHub
  workflow_dispatch:

jobs:
  build:
    # Stratégie de Matrice : exécute les mêmes étapes sur 3 machines virtuelles différentes
    strategy:
      matrix:
        include:
          - os: macos-14
            platform: Mac-ARM
          - os: macos-13
            platform: Mac-Intel
          - os: windows-latest
            platform: Windows

    # Utilise la machine virtuelle définie dans la matrice
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Récupère le code de votre dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure l'environnement Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Assurez-vous que c'est la version que vous utilisez

      # 3. Crée l'environnement virtuel
      - name: Create virtual environment
        run: python -m venv venv

      # 4. Installe les dépendances (macOS & Linux)
      - name: Install dependencies (macOS & Linux)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt
        shell: bash

      # 4b. Installe les dépendances (Windows)
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          .\venv\Scripts\activate
          pip install --upgrade pip
          pip install -r backend\requirements.txt
        shell: pwsh

      # 5. Construire l'API avec PyInstaller (macOS & Linux)
      - name: Build API with PyInstaller (macOS & Linux)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          python -m PyInstaller --noconfirm --clean --name PremiereCopilot --console --hidden-import=scipy._cyutility backend/api.py
        shell: bash

      # 5b. Construire l'API avec PyInstaller (Windows)
      - name: Build API with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          .\venv\Scripts\activate
          python -m PyInstaller --noconfirm --clean --name PremiereCopilot --console --hidden-import=scipy._cyutility backend\api.py
        shell: pwsh

      # 6. Préparer les fichiers pour le ZXP (macOS & Linux)
      - name: Prepare files for ZXP (macOS & Linux)
        if: runner.os != 'Windows'
        run: |
          mkdir -p frontend/PremiereGPTBeta/js/libs/PremiereCopilotAPI
          # Utilise cp -R pour copier le dossier de manière récursive
          cp -R dist/PremiereCopilot frontend/PremiereGPTBeta/js/libs/PremiereCopilotAPI/

      # 6b. Préparer les fichiers pour le ZXP (Windows)
      - name: Prepare files for ZXP (Windows)
        if: runner.os == 'Windows'
        run: |
          # PowerShell's copy is recursive by default for directories
          copy dist\PremiereCopilot frontend\PremiereGPTBeta\js\libs\PremiereCopilotAPI -Recurse
        shell: pwsh

      # 7. Créer et signer le ZXP (macOS & Linux)
      - name: Create and Sign ZXP (macOS & Linux)
        if: runner.os != 'Windows'
        working-directory: ./frontend
        run: |
          chmod +x ./ZXPSignCmd
          ./ZXPSignCmd -selfSignedCert "FR" "France" "PremiereCopilot" "PremiereGPTBeta" "plugin2025" "PremiereGPTBeta.p12" -email "admin@premierecopilot.com" -orgUnit "PremiereGPTBeta" -validityDays 3650
          ./ZXPSignCmd -sign "./PremiereGPTBeta" "./PremiereGPTBeta.zxp" "./PremiereGPTBeta.p12" "plugin2025"
          ./ZXPSignCmd -verify "./PremiereGPTBeta.zxp" -certinfo

      # 7b. Créer et signer le ZXP (Windows)
      - name: Create and Sign ZXP (Windows)
        if: runner.os == 'Windows'
        working-directory: ./frontend
        run: |
          .\ZXPSignCmd.exe -selfSignedCert "FR" "France" "PremiereCopilot" "PremiereGPTBeta" "plugin2025" "PremiereGPTBeta.p12" -email "admin@premierecopilot.com" -orgUnit "PremiereGPTBeta" -validityDays 3650
          .\ZXPSignCmd.exe -sign ".\PremiereGPTBeta" ".\PremiereGPTBeta.zxp" ".\PremiereGPTBeta.p12" "plugin2025"
          .\ZXPSignCmd.exe -verify ".\PremiereGPTBeta.zxp" -certinfo
        shell: pwsh

      # 8. Installer l'application "Packages" (macOS uniquement)
      - name: Install Packages Application (macOS)
        if: runner.os != 'Windows'
        run: |
          curl -L -o Packages.dmg http://s.sudre.free.fr/Software/files/Packages.dmg
          hdiutil attach Packages.dmg
          sudo installer -pkg /Volumes/Packages/Packages.pkg -target /
          hdiutil detach /Volumes/Packages

      # 9. Construire l'installeur PKG (macOS uniquement)
      - name: Build PKG Installer (macOS)
        if: runner.os != 'Windows'
        run: |
          # Crée un dossier pour le contenu qui sera inclus dans le PKG
          mkdir -p build/pkg_payload
          # Décompresse le ZXP dans ce dossier
          unzip frontend/PremiereGPTBeta.zxp -d build/pkg_payload
          # Lance la construction du PKG
          packagesbuild PremiereCopilot_ARM.pkgproj --build-folder build

      # 10. Uploader l'artefact final
      - name: Upload ZXP Artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: PremiereGPTBeta-ZXP-${{ matrix.platform }}
          path: frontend/PremiereGPTBeta.zxp
          
      - name: Upload PKG Installer (macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: PremiereCopilot-Installer-${{ matrix.platform }}
          path: build/PremiereCopilot_ARM.pkg
